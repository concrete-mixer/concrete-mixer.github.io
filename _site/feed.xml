<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concrète Mixer - messing around with audio code</title>
    <atom:link href="https://concrete-mixer.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <link>https://concrete-mixer.github.io/</link>
    <description>This is a blog about audio coding that rambles through the work I’ve done over the past couple of years.</description>
    <pubDate>Sun, 22 Nov 2015 12:52:12 +1300</pubDate>
    
      <item>
        <title>Using dot to make charts</title>
        <link>https://concrete-mixer.github.io/concr%C3%A8te%20mixer/2015/11/20/dot.html</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io/concr%C3%A8te%20mixer/2015/11/20/dot.html</guid>
        <description>&lt;p&gt;As this is a software blog I may as well mention how I generated the charts in the last post. As background I’ve had experience in the past drawing flow charts in Visio and Fireworks (those were the days), and was looking for something similar. Being in Linux land I tried Inkscape and dia, but Inkscape was a bit bewildering and dia was a bit rubbish (sorry dia developers!). I knew vaguely of tools that could generate charts from text and tried flowchart.js, but found the whole business of rendering a chart by loading a web page a bit inelegant. In the end I found dot, part of the &lt;a href=&quot;http://graphviz.org/&quot;&gt;GraphViz package&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-output-flow-diagram&quot;&gt;The output flow diagram&lt;/h1&gt;

&lt;p&gt;To refresh your memory, here’s the output file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/cm-schematic-sensible.svg&quot; alt=&quot;Concrete Mixer flow diagram simplified&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-markup&quot;&gt;The markup&lt;/h1&gt;

&lt;p&gt;And here’s the underlying ‘dot’ code used to generate the file (sorry the syntax highlighting is a bit rubbish, but the &lt;a href=&quot;http://pygments.org/&quot;&gt;pygments&lt;/a&gt; lexer I found for this is a bit minimal):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dot&quot; data-lang=&quot;dot&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;digraph&lt;/span&gt;  {
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;/* declare chartwide settings */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;na&quot;&gt;penwidth&lt;/span&gt;=2.0;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;just=left;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;node&lt;/span&gt; [fontname=&amp;quot;Helvetica&amp;quot;,penwidth=&amp;quot;2.0&amp;quot;,fontcolor=white,style=filled];
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;edge&lt;/span&gt; [penwidth=&amp;quot;2.0&amp;quot;];
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;na&quot;&gt;fontname&lt;/span&gt;=helvetica;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;na&quot;&gt;fontsize&lt;/span&gt;=16;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;/* subgraphs allow you to group nodes */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;subgraph&lt;/span&gt; cluster_0 {
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;node&lt;/span&gt; [fillcolor=chocolate,color=chocolate];
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;graph&lt;/span&gt; [color=chocolate];
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;         &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;=&amp;quot;Perl&amp;quot;;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;         &lt;span class=&quot;na&quot;&gt;fontcolor&lt;/span&gt;=chocolate;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;         concretepm [label=&amp;quot;Concrete.pm\nOSC server&amp;quot;];
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;node&lt;/span&gt; [fillcolor=brown,color=brown];
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;     }
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;subgraph&lt;/span&gt; cluster_1 {
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;node&lt;/span&gt; [fillcolor=darkorchid,color=darkorchid];
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;graph&lt;/span&gt; [color=darkorchid];
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;         &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;=&amp;quot;WAV files&amp;quot;;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;         &lt;span class=&quot;na&quot;&gt;fontcolor&lt;/span&gt;=darkorchid;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;         main [label=&amp;quot;Main&amp;quot;];
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;         alt [label=&amp;quot;Alt&amp;quot;];
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;     }
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;subgraph&lt;/span&gt; cluster_2 {
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;graph&lt;/span&gt; [color=forestgreen];
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;         &lt;span class=&quot;na&quot;&gt;fontcolor&lt;/span&gt;=forestgreen;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;         &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;=&amp;quot;ChucK&amp;quot;;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;node&lt;/span&gt; [fillcolor=forestgreen,color=forestgreen];
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt;         playsound [label=&amp;quot;playSound.ck&amp;quot;];
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt;         playfx [label=&amp;quot;playFxChain.ck&amp;quot;];
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt;     }
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;/* the rest of the chart markup defines edges between nodes plus non subgraph nodes */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;node&lt;/span&gt; [fillcolor=hotpink,color=hotpink];
&lt;span class=&quot;lineno&quot;&gt;40&lt;/span&gt;     shell [label=&amp;quot;Linux shell $&amp;quot;,color=hotpink];
&lt;span class=&quot;lineno&quot;&gt;41&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;edge&lt;/span&gt; [color=hotpink];
&lt;span class=&quot;lineno&quot;&gt;42&lt;/span&gt;     shell -&amp;gt; concretepm;
&lt;span class=&quot;lineno&quot;&gt;43&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;44&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;/* wav file flow */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;45&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;edge&lt;/span&gt; [color=darkorchid];
&lt;span class=&quot;lineno&quot;&gt;46&lt;/span&gt;     main -&amp;gt; concretepm;
&lt;span class=&quot;lineno&quot;&gt;47&lt;/span&gt;     alt -&amp;gt; concretepm;
&lt;span class=&quot;lineno&quot;&gt;48&lt;/span&gt;     concretepm -&amp;gt; playsound;
&lt;span class=&quot;lineno&quot;&gt;49&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;50&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;/* play*-OSC server interactions */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;51&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;edge&lt;/span&gt; [color=chocolate];
&lt;span class=&quot;lineno&quot;&gt;52&lt;/span&gt;     concretepm -&amp;gt; playsound;
&lt;span class=&quot;lineno&quot;&gt;53&lt;/span&gt;     concretepm -&amp;gt; playfx;
&lt;span class=&quot;lineno&quot;&gt;54&lt;/span&gt;     playfx -&amp;gt; concretepm;
&lt;span class=&quot;lineno&quot;&gt;55&lt;/span&gt;     playsound -&amp;gt; concretepm;
&lt;span class=&quot;lineno&quot;&gt;56&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;57&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;/* audio connections through to the dac */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;58&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;node&lt;/span&gt; [fillcolor=steelblue,color=steelblue];
&lt;span class=&quot;lineno&quot;&gt;59&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;edge&lt;/span&gt; [color=steelblue];
&lt;span class=&quot;lineno&quot;&gt;60&lt;/span&gt;     playsound -&amp;gt; DAC;
&lt;span class=&quot;lineno&quot;&gt;61&lt;/span&gt;     playsound -&amp;gt; playfx;
&lt;span class=&quot;lineno&quot;&gt;62&lt;/span&gt;     playfx -&amp;gt; DAC;
&lt;span class=&quot;lineno&quot;&gt;63&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The bulk of the markup is colour declarations and changes, so while this looks like a lot of work, the subgroup and and node interrelationships can be defined in about half the number of lines.&lt;/p&gt;

&lt;h1 id=&quot;installation-and-invocation&quot;&gt;Installation and invocation&lt;/h1&gt;

&lt;p&gt;Installing graphviz in debian/ubuntu land requires the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ sudo apt-get install graphviz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To generate an SVG all you have to run is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ dot -T svg -O cm-schematic-minimal.dot&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…and an SVG file called cm-schematic-minimal.dot.svg is created.&lt;/p&gt;

&lt;h1 id=&quot;concludings&quot;&gt;Concludings&lt;/h1&gt;

&lt;p&gt;I’m not sure everyone will think writing 63 lines of code is better than spending 10 minutes with a graphical flowchart package to make the same chart. As a non-designer I likein the idea of marking up a text file and feeding it into a program so that it takes care of the layout, and it’s quite elegant (and portable) to have everything encapsulated in a single text file.&lt;/p&gt;

&lt;p&gt;If you want to learn more about dot &lt;a href=&quot;http://www.graphviz.org/pdf/dotguide.pdf&quot;&gt;this excellent guide&lt;/a&gt; will help you out.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 00:00:00 +1300</pubDate>
      </item>
    
      <item>
        <title>Gastroscopy of Concrète Mixer</title>
        <link>https://concrete-mixer.github.io/concr%C3%A8te%20mixer/2015/11/15/internals.html</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io/concr%C3%A8te%20mixer/2015/11/15/internals.html</guid>
        <description>&lt;p&gt;This post describes what Concrète Mixer is doing when it does its thing.&lt;/p&gt;

&lt;h1 id=&quot;complicated-diagram&quot;&gt;Complicated diagram&lt;/h1&gt;

&lt;p&gt;The following is a schematic I put together describing all the componentry in Concrete Mixer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/cm-schematic.svg&quot; alt=&quot;Concrete Mixer flow diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I started writing out what all this was doing and realised that in all honesty no one cares.&lt;/p&gt;

&lt;h1 id=&quot;simple-diagram&quot;&gt;Simple diagram&lt;/h1&gt;

&lt;p&gt;When you get down to it, what’s actually important is the pipeline for what the listener gets to hear. With this in mind, here’s a stripped down version of the diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/cm-schematic-sensible.svg&quot; alt=&quot;Concrete Mixer flow diagram simplified&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Key:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The pink line denotes the app being initiated&lt;/li&gt;
  &lt;li&gt;Purples lines denote flow of file names&lt;/li&gt;
  &lt;li&gt;Brown lines: OSC messages and play* entity (re)invocation&lt;/li&gt;
  &lt;li&gt;Blue lines: flow of audio signal from the play* entities to the sound card,&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;whats-going-on---in-brief&quot;&gt;What’s going on - in brief&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The audio processing is written in &lt;a href=&quot;http://chuck.cs.princeton.edu/&quot;&gt;ChucK&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The ChucK libraries are enveloped by a sticky layer of &lt;a href=&quot;https://www.perl.org&quot;&gt;Perl&lt;/a&gt; which is there to do the things ChucK can’t do.&lt;/li&gt;
  &lt;li&gt;The Perl layer identifies the audio files to play (from directories the user has specified in &lt;code&gt;conf/concrete.conf&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;There are two distinct sound entities in play:
    &lt;ul&gt;
      &lt;li&gt;playSound (of which there can be multiple concurrent instances)&lt;/li&gt;
      &lt;li&gt;playFxChain (of which there can be only one at a time)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The app takes at least one but possibly two directories of WAV files as the sound source&lt;/li&gt;
  &lt;li&gt;The app will stop playback once it has run out of wave files to play, or, because ChucK leaks memory, when the app has used more than half the system RAM. Alternatively, if the user configures &lt;code&gt;endless_play=1&lt;/code&gt; in &lt;code&gt;conf/concrete.conf&lt;/code&gt;, the app will restart rather than end, and will thus play perpetually.&lt;/li&gt;
  &lt;li&gt;The app operates an OSC server in Perl space which receives signals from playSound and playFxChain that they have completed their tasks, and will generate new instances of both, until there are no more files left to play.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;whats-going-on---less-briefly&quot;&gt;What’s going on - less briefly&lt;/h1&gt;

&lt;h2 id=&quot;playsound&quot;&gt;playSound&lt;/h2&gt;

&lt;p&gt;The playSound entity is there to play wave files. The entity gets passed a filename by the OSC server, and then loads the file for playback. The playback period is divided into random lengths of time (dertived from the &lt;code&gt;bpm&lt;/code&gt; value specified in &lt;code&gt;conf/global.conf&lt;/code&gt;) in which the sound can be altered in some way. For any given period, there is a 1/8 chance that playback will be altered. When the decision to alter playback is made, a further random choice is taken as to what should be done. Possibilities include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reversing playback&lt;/li&gt;
  &lt;li&gt;changing the recording’s pan position (if the sound is mono)&lt;/li&gt;
  &lt;li&gt;adding an effect to the sound (eg echo, reverb)&lt;/li&gt;
  &lt;li&gt;chopping up the playback in weird ways.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all there are 13 possible operations that can be performed. The 1/8 ratio of for doing something different is a value derived through experiment and in accordance with my taste. To my ears, it seems appropriate to keep the wave files performing normal playback most of the time, with occasional forays into non-standard transmission to make things interesting.&lt;/p&gt;

&lt;h2 id=&quot;playfxchain&quot;&gt;playFxChain&lt;/h2&gt;

&lt;p&gt;The playFxChain entity sets up an effects chain into which playSounds are fed. There are 25 different effects chains available. These chains contain different combinations of effects defined in lib/Fx, which has 14 different effects libraries available. Most of these effects are built in to ChucK but there are a few I’ve cobbled together. I might discuss these in a later post.&lt;/p&gt;

&lt;p&gt;playFxChains are instantiated for random periods of time, separate to playSounds. This means that a playFxChain instance may fade out during playback of one or more playSounds, only for a different chain to fade in moments later. The intended effect is an ever changing sound, with playSounds and playFxChains criss-crossing each other. Even when all sound happens to fade out at the same time, the result can still be interesting.&lt;/p&gt;

&lt;h2 id=&quot;the-osc-server&quot;&gt;The OSC server&lt;/h2&gt;

&lt;p&gt;In Perl space the app operates an OSC server. OSC stands for &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_Sound_Control&quot;&gt;Open Sound Control&lt;/a&gt;, a simplish protocol that is intended to be a sort of &lt;a href=&quot;https://en.wikipedia.org/wiki/MIDI&quot;&gt;MIDI&lt;/a&gt; internet protocol. ChucK has OSC support, so it seemed the natural way for the ChucK to communicate with the Perl layer. So when each playSound and playFxChain instance have completed their task, they signal the OSC server, which will kick off another instance of the entity.&lt;/p&gt;

&lt;p&gt;So that, in a nutshell, is how Concrete Mixer works.&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Nov 2015 00:00:00 +1300</pubDate>
      </item>
    
      <item>
        <title>About Concrète Mixer</title>
        <link>https://concrete-mixer.github.io/concr%C3%A8te%20mixer/2015/11/09/concrete-mixer.html</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io/concr%C3%A8te%20mixer/2015/11/09/concrete-mixer.html</guid>
        <description>&lt;p&gt;So this blog is mainly focused on Concrète Mixer, a sound app I’ve built to be run on a Raspberry Pi. In this post I brief description of the app as a starter. Later posts will get in to more detailed explorations.&lt;/p&gt;

&lt;h1 id=&quot;what-is&quot;&gt;What is?&lt;/h1&gt;

&lt;p&gt;Every time I think about what Concrète Mixer is, I come up with a new description. Today it’s: Concrète Mixer is an audio file mixing engine which generates “soundscapes” by applying random decisions about how the sounds should be arranged. You can supply any kind of sound file, but my ‘use case’ has been to mix field recordings I’ve made.&lt;/p&gt;

&lt;p&gt;You can learn how to install the app on the project’s &lt;a href=&quot;https://github.com/concrete-mixer/concrete-mixer/blob/master/README.md&quot;&gt;github page&lt;/a&gt;, bug for those who prefer a more audiovisual run through, I’ve made a youtube that attempts to explain what Concrète Mixer is and how to set it up:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/oGbAfF0j6Us&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Being the first instructional video I’ve produced, it’s not exactly Scorsese (although it might be slightly Hitchcockian).&lt;/p&gt;

&lt;h1 id=&quot;audio-demos&quot;&gt;Audio demos&lt;/h1&gt;

&lt;p&gt;Finally, there are demo renditions of the application available:&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/225341813&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&quot;&gt;&lt;/iframe&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/225344033&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;These recordings represent two separate run through of the app using the same set of field recordings. The audio is recorded as is with no post-processing or editing. Indeed I haven’t actually listened to them all the way through.&lt;/p&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h1&gt;

&lt;p&gt;The next post will be a deeper description of how the app works.&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Nov 2015 00:00:00 +1300</pubDate>
      </item>
    
      <item>
        <title>What&#39;s going on here?</title>
        <link>https://concrete-mixer.github.io/meta/2015/11/07/intro.html</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io/meta/2015/11/07/intro.html</guid>
        <description>&lt;p&gt;This is a blog about audio coding that rambles through the work I’ve done over the past couple of years. It will be mostly focused on the &lt;a href=&quot;https://github.com/concrete-mixer/concrete-mixer&quot;&gt;Concrète Mixer app&lt;/a&gt;, but will also cover a couple of side projects.&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Nov 2015 00:00:00 +1300</pubDate>
      </item>
    
  </channel>
</rss>
