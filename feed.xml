<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concrète Mixer</title>
    <description>An internet radio station dedicated to shredded field recording ambience</description>
    <link>https://concrete-mixer.github.io//</link>
    <atom:link href="https://concrete-mixer.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 19 Jun 2017 22:16:08 +1200</pubDate>
    <lastBuildDate>Mon, 19 Jun 2017 22:16:08 +1200</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>New sounds by Michael Upton</title>
        <description>&lt;p&gt;Michael is a friend of mine who lives up the road and (in my view at least) is New Zealand’s leading electronica practitioner. He’s recorded all over the place, and has generously donated several sounds to the cause.&lt;/p&gt;

&lt;h2 id=&quot;contributions&quot;&gt;Contributions&lt;/h2&gt;

&lt;h2 id=&quot;lake-tarawera-dam&quot;&gt;Lake Tarawera dam&lt;/h2&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324831925&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This recording features NZ birdlife both native and introduced recorded at &lt;a href=&quot;http://www.doc.govt.nz/parks-and-recreation/places-to-go/bay-of-plenty/places/lake-tarawera-scenic-reserve/&quot;&gt;Lake Tarawera&lt;/a&gt;. Intriguingly, in the background there’s occasionally something that sounds like a sliding door opening and closing.&lt;/p&gt;

&lt;h2 id=&quot;cadiz-cathedral-parts-1-and-2&quot;&gt;Cadiz Cathedral parts 1 and 2&lt;/h2&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324831859&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324831786&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Oddly the CM collection already features &lt;a href=&quot;https://soundcloud.com/concrete-mixer/cadiz-cathedral-farting-tidyish&quot;&gt;a recording of Cadiz Cathedral&lt;/a&gt; from 2011, when the cathedral was under renovation and I captured the sound of a power drill reverberating majestically. This more intimate recording (“curated” into two separate segments for CM) features an excellent tight echo from an alcove or chapel or crypt or some other chamber.&lt;/p&gt;

&lt;h2 id=&quot;rissington-dam&quot;&gt;Rissington Dam&lt;/h2&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324831181&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This recording features some nice interplay between &lt;a href=&quot;https://en.wikipedia.org/wiki/Bird&quot;&gt;avian&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Frog&quot;&gt;amphibian&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Tetrapod&quot;&gt;tetrapods&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324831053&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Taken from the start of the same source recording, here’s the sound of Michael’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flops&quot;&gt;jandals&lt;/a&gt; thakking against his heels as he wanders away from the recorder. I guess you can hear this compelling rubber percussion anywhere thong footwear is sold, but it’s an iconic kiwi sound, definitely up there in the Kiwiana pantheon alongside such exotic articles as &lt;a href=&quot;https://en.wikipedia.org/wiki/Buzzy_Bee&quot;&gt;buzzy bees&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Hokey_pokey_(ice_cream)&quot;&gt;hokey pokey ice cream&lt;/a&gt;, mother fuckers!&lt;/p&gt;

&lt;h2 id=&quot;fireworks-in-karori-parts-1-and-2&quot;&gt;Fireworks in Karori parts 1 and 2&lt;/h2&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324831129&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324830991&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This &lt;a href=&quot;https://en.wikipedia.org/wiki/Guy_Fawkes_Night&quot;&gt;Guy Fawke’s night&lt;/a&gt; recording naturally features a (literally) sparkling pyrotechnic performance, but also provides a crepuscular suburban soundscape. There’s even some charming dialogue from some authentic kiwi &lt;a href=&quot;https://en.wiktionary.org/wiki/munter#English&quot;&gt;munters&lt;/a&gt;. This recording has it all!&lt;/p&gt;

&lt;h2 id=&quot;train-and-train-station-ella-sri-lanka&quot;&gt;Train and train station (Ella, Sri Lanka)&lt;/h2&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324830695&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324830683&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Again I’ve taken two fragments from a single recording. The first features the ambience of a Sri Lankan train station, while the second contains a train passing by. The aural climax is a flash of &lt;a href=&quot;https://en.wikipedia.org/wiki/Doppler_effect&quot;&gt;doppler&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Flanging&quot;&gt;flange&lt;/a&gt; at the moment the engine passes. Magic!&lt;/p&gt;

&lt;h2 id=&quot;car-wash-levin&quot;&gt;Car wash, Levin&lt;/h2&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324836479&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;What this recording shows most keenly is that if you listen to the sounds of a car wash when you’re not actually in the car as it is being washed, they sound remarkably like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Granular_synthesis&quot;&gt;granular synthesis&lt;/a&gt;-driven piece of sound art.&lt;/p&gt;

&lt;p&gt;And that concludes Michael’s contributions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As we kiwis say, thanks Moykull!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Jun 2017 00:00:00 +1200</pubDate>
        <link>https://concrete-mixer.github.io//2017/06/mjupton/</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io//2017/06/mjupton/</guid>
        
        
        <category>Concrète Mixer radio</category>
        
      </item>
    
      <item>
        <title>Concrète Mixer now available on TuneIn</title>
        <description>&lt;p&gt;Concrète Mixer is now available in TuneIn, either &lt;a href=&quot;http://tunein.com/radio/Concr%C3%A8te-Mixer-s291379/&quot;&gt;from the website&lt;/a&gt; or via its various apps.&lt;/p&gt;

&lt;p&gt;Just to prove it, here’s a TuneIn embedded player for the station:&lt;/p&gt;

&lt;iframe src=&quot;http://tunein.com/embed/player/s291379/&quot; style=&quot;width:100%;height:100px;&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Sat, 06 May 2017 00:00:00 +1200</pubDate>
        <link>https://concrete-mixer.github.io//2017/05/tunein/</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io//2017/05/tunein/</guid>
        
        
        <category>Concrète Mixer radio</category>
        
      </item>
    
      <item>
        <title>Real time track data added to home page</title>
        <description>&lt;p&gt;You should notice that there’s a “Now playing” section in the “hero image” on the home page which lists tracks currently playing in the Concrète Mixer audio stream. I’ve achieved this by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Adding extra &lt;a href=&quot;http://opensoundcontrol.org&quot;&gt;OSC&lt;/a&gt; request calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;playSound.ck&lt;/code&gt; within Concrète Mixer, which broadcast the file name being played&lt;/li&gt;
  &lt;li&gt;Adding a &lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs&lt;/a&gt; server which:
    &lt;ul&gt;
      &lt;li&gt;Listens for OSC notifications from &lt;code class=&quot;highlighter-rouge&quot;&gt;playSound.ck&lt;/code&gt;, converting the file name into three parts:
        &lt;ol&gt;
          &lt;li&gt;Sound contributor&lt;/li&gt;
          &lt;li&gt;Description of sound&lt;/li&gt;
          &lt;li&gt;Soundcloud track ID (if available)&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Broadcasts the data to connected browsers via websockets (or other appropriate technology via &lt;a href=&quot;https://github.com/sockjs&quot;&gt;sock.js&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Added &lt;a href=&quot;https://www.nginx.com&quot;&gt;nginx&lt;/a&gt; to proxy both the node server and the mp3 stream to downstream consumers&lt;/li&gt;
  &lt;li&gt;Adding javascript (humble &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt;) to the homepage which updates the text under the player when a new track is played.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far the Pi hasn’t taken on any extra load from these services (the bulk of the CPU usage lies - understandably - with chuck and darkice). Admittedly the Pi’s not serving many simultaneous connections. Still, what an awesome little machine, eh?&lt;/p&gt;

&lt;p&gt;There’s more work that could be done: as the metadata is currently bundled into the filename it’s tempting to set up a database to keep track of the data at the node end, and simplify the file names to simple ids. The db would be built in sqlite or maybe one of those fancy nosql dbs I’ve hearing about. So many possibilities…&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Apr 2017 00:00:00 +1200</pubDate>
        <link>https://concrete-mixer.github.io//2017/04/real-time-track-data/</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io//2017/04/real-time-track-data/</guid>
        
        
        <category>Concrète Mixer radio</category>
        
      </item>
    
      <item>
        <title>New sounds by Adrien Capozzi</title>
        <description>&lt;p&gt;In my quest to get contributions to Concrete Mixer I’ve turned to muso friends with the view that, well, everyone who has dabbled in electronica has made field recordings, right? Well my LA-based chum &lt;a href=&quot;http://www.adrien75.com/adrien75.html&quot;&gt;Adrien Capozzi&lt;/a&gt; said he hadn’t, but that he’d make some, and a few days later emailed me two tracks. That’s exactly the sort of commitment to the cause we’re after!&lt;/p&gt;

&lt;h2 id=&quot;contributions&quot;&gt;Contributions&lt;/h2&gt;

&lt;h3 id=&quot;chimes-cambria&quot;&gt;Chimes Cambria&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/315506402&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Adrien didn’t provide any description of what either recording is about, so I don’t have much to go on except the titles. When I google ‘Chimes Cambria’ &lt;a href=&quot;http://www.lampsplus.com/products/cambria-chimes-antique-walnut-12-inch-wide-bulova-mantel-clock__v1929.html&quot;&gt;this&lt;/a&gt; is the result I get, but that doesn’t seem quite right. The chiming and occasional gonging sound great though, and the mystery endures…&lt;/p&gt;

&lt;h3 id=&quot;underwood-family-farm&quot;&gt;Underwood Family Farm&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/315506397&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Again there’s no context to this recording other than the title. My knowledge of American farming being fairly limited, I’m tempted to imagine this is the soundtrack to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Barn_raising&quot;&gt;barn raising&lt;/a&gt;, though again I guess this isn’t very likely. No matter what the occasion happened to be, it sounds pretty relaxed. I’d like to have been there.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks Adrien for adding your ingredients to Concrete Mixer’s sonic gumbo!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Apr 2017 00:00:00 +1300</pubDate>
        <link>https://concrete-mixer.github.io//2017/04/new-sounds-adrien/</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io//2017/04/new-sounds-adrien/</guid>
        
        
        <category>Concrète Mixer radio</category>
        
      </item>
    
      <item>
        <title>New sounds by Rob Szeliga added to Concrète Mixer radio</title>
        <description>&lt;p&gt;Our second sound donor (praise him with great praise!) is &lt;a href=&quot;http://www.rszoniq.com&quot;&gt;Rob Szeliga&lt;/a&gt;, a UK-based sound designer, and he’s sent through a nice range of recordings.&lt;/p&gt;

&lt;h2 id=&quot;contributions&quot;&gt;Contributions&lt;/h2&gt;

&lt;h3 id=&quot;prayers-at-osu-kannon-temple&quot;&gt;Prayers at Osu Kannon Temple&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/298454977&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This recording features a bit of tranquil bonging and chanting from a Buddhist temple in Japan. I’ve spent a bit of time in a few Japanese temples myself (a sign, I fear, of a misspent youth), so this recording brings back some memories of stone gardens, exquisite lawns, golden statues and, weirdly, eagles flying high over head.&lt;/p&gt;

&lt;p&gt;Incidentally, the base CM sound library includes a &lt;a href=&quot;https://soundcloud.com/concrete-mixer/enter-the-chamber-of-the-10000-buddhas&quot;&gt;recording I did at the Temple of Ten Thousand Buddhas in Sha Tin, Hong Kong&lt;/a&gt;. That lacks the tranquility of this recording, because it was Chinese New Year and it was crowded with people casting &lt;a href=&quot;https://en.wikipedia.org/wiki/Kau_cim&quot;&gt;fortune sticks&lt;/a&gt; to learn if they might get rich.&lt;/p&gt;

&lt;h3 id=&quot;wind-through-stone-wall&quot;&gt;Wind through stone wall&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/291877441&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This excellent recording really transports you to a rather windy day in the English countryside. Makes you want to put on another layer or two of clothing. And emigrate. Brr!&lt;/p&gt;

&lt;h3 id=&quot;the-horns-of-india&quot;&gt;The horns of India&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/289875405&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Firstly, the chaotic blarings of the bells are great - nice rich sound source, that - but Rob did a bit of granular synthesis to freeze the sounds in time and stretch them out into a sort of brief &lt;a href=&quot;https://en.wikipedia.org/wiki/Illbient&quot;&gt;illbient&lt;/a&gt; composition. I’ve excised the signal processing from the recording for CM in case anyone thinks it’s part of CM (if you think CM is capable of that kind of real-time DSP you’d be sadly mistaken).&lt;/p&gt;

&lt;p&gt;That said, it’s a nice piece of filtration and I feel a bit bad about the removal. Sorry Rob!&lt;/p&gt;

&lt;h3 id=&quot;midday-at-the-foundling-museum&quot;&gt;Midday at the Foundling Museum&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/311781201&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;It’s hard to imagine how midday could be signified with more gravitas than this clock manages.&lt;/p&gt;

&lt;h3 id=&quot;underground-screech&quot;&gt;Underground Screech&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/293762882&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;There have been times when I’ve been on the London Underground where I’ve been a little concerned I’d never made it back to the outside world. It’s certainly reassuring to hear a train in motion.&lt;/p&gt;

&lt;h3 id=&quot;traction-engines&quot;&gt;Traction Engines&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/282694272&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;TRACTION ENGINES!&lt;/p&gt;

&lt;h3 id=&quot;thanks-rob&quot;&gt;Thanks Rob!&lt;/h3&gt;
</description>
        <pubDate>Tue, 21 Mar 2017 00:00:00 +1300</pubDate>
        <link>https://concrete-mixer.github.io//2017/03/new-sounds-rszeliga/</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io//2017/03/new-sounds-rszeliga/</guid>
        
        
        <category>Concrète Mixer radio</category>
        
      </item>
    
      <item>
        <title>New sounds by Sebastian Brock added to Concrète Mixer radio</title>
        <description>&lt;p&gt;As mentioned last post I’m keen to add more sound recordings to &lt;a href=&quot;http://concrete-mixer.github.io/concrete-mixer.mp3&quot;&gt;Concrète Mixer Radio (CMR)&lt;/a&gt; and have &lt;a href=&quot;/concrète mixer radio/2017/02/12/call-for-field-recordings.html&quot;&gt;put out a call&lt;/a&gt; for contributions. I’ve also poked around on Soundcloud hitting up users asking for field recordings of theirs I like.&lt;/p&gt;

&lt;p&gt;Our first contributer is &lt;a href=&quot;http://bemtevi.de/&quot;&gt;Sebastian Brock&lt;/a&gt; (aka Bemtevi), who has &lt;a href=&quot;https://soundcloud.com/user-466564937&quot;&gt;many recordings on Soundcloud&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;contributions&quot;&gt;Contributions&lt;/h2&gt;

&lt;h3 id=&quot;hckerschwne-mute-swan-cygnus-olor&quot;&gt;Höckerschwäne (mute swan, &lt;em&gt;cygnus olor&lt;/em&gt;)&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/254959798&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This is a recording of some very unmute swan(s?) on Lake Werbeliner in northern Saxony (or so Wikipedia tells me). I love how the birds’ otherworldly calls are hypnotically locked in step. I also like how the sound’s pitch descends as the flying swans doppler their way into the distance.&lt;/p&gt;

&lt;p&gt;It sounds quite &lt;a href=&quot;https://en.wikipedia.org/wiki/Dub_music&quot;&gt;dubby&lt;/a&gt; to me. Would be good to drop a few seconds of swan over an &lt;a href=&quot;https://www.youtube.com/watch?v=ztq7-kkygZk&quot;&gt;Augustus Pablo track&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wind-3---zaun-fence&quot;&gt;Wind 3 - Zaun (fence)&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/299761333&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This is quite an eerie recording and it will be interesting to see how it blends with the others in the sound pool. The fence seems to have been recorded using a contact microphone which means the sound has a smaller dynamic range (no high end, basically), which makes the recording sound like it’s been slowed down several octaves. Along with this discombobulation there’s a bleak science fictiony vibe to the recording. Kind of feels like the wind is groaning across an apocalyptic landscape…&lt;/p&gt;

&lt;h3 id=&quot;montpellier&quot;&gt;Montpellier&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/250477151&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This recording catches several moods in the southern French town of Montpellier, from church bells to cafe conversation to what sounds like a very vigorous street parade. I cut this recording into several two minute sections which work in well with the other sounds in the mix.&lt;/p&gt;

&lt;h3 id=&quot;der-strand-von-nizza&quot;&gt;Der strand von Nizza&lt;/h3&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/273828849&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Oh this one’s excellent: the waves have a satisfying punch as they crash, and the sound of water rattling gravel as the waves ebb is tingly. Beautifully shaped white noise.&lt;/p&gt;

&lt;p&gt;Additionally, just above the the sound of the waves you can sometimes hear the voices of people on the beach. From my own recording experience I know it can be annoying to have extraneous noise when you want your aural subject to be isolated, but in this instance the human noise adds another dimension to the recording, grounding it in a real location. It really makes you feel like you’ve washed up on the French Riviera…&lt;/p&gt;

&lt;p&gt;Many thanks to Sebastian for letting me use his sounds!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to hear more of Sebastian’s work you can check out &lt;a href=&quot;http://bemtevi.de/&quot;&gt;his website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Mar 2017 00:00:00 +1300</pubDate>
        <link>https://concrete-mixer.github.io//2017/03/new-sounds-bemtevi/</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io//2017/03/new-sounds-bemtevi/</guid>
        
        
        <category>Concrète Mixer radio</category>
        
      </item>
    
      <item>
        <title>Call for field recordings</title>
        <description>&lt;p&gt;So as a side-project (or perhaps the main point?) of Concrète Mixer, I’ve set up an Icecast server running a live internet radio stream of the software’s output. Currently the supplied audio is recordings I’ve made, but I don’t get out so much these days so I’d like to open it up to recordings by other people.&lt;/p&gt;

&lt;p&gt;Some bullet points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The ideal recording length seems to be about 90 to 150 seconds. Too short and the sound feels too abrupt; too long and the listener can lose interest.&lt;/li&gt;
  &lt;li&gt;I’m not after particularly high quality audio (some of my recordings were made on camcorders, dictaphones, mp3 players); that said, the recording has to be &lt;em&gt;fairly&lt;/em&gt; intelligible.&lt;/li&gt;
  &lt;li&gt;The recording has to have some sort innate interest, some element that engages a listener’s interest. I can’t really define that more than “I know it when I hear it”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This probably isn’t an especially helpful guide. To provide something more concrete (haha!), here’s two SoundCloud playlists of the sounds I’m currently using, as a very loose guide.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/playlists/283085828&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/playlists/283082840&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;
Sadly I’m not in a position to pay you for your contributions, but aside from the inherent glory you’ll gain in donating a recording to this project, I’ll do what I can to give you recognition.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you would like to submit a sound to be added to the Concrète Mixer live stream, please &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#099;&amp;#111;&amp;#110;&amp;#099;&amp;#114;&amp;#101;&amp;#116;&amp;#101;&amp;#109;&amp;#105;&amp;#120;&amp;#101;&amp;#114;&amp;#046;&amp;#097;&amp;#117;&amp;#100;&amp;#105;&amp;#111;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;email me&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Feb 2017 00:00:00 +1300</pubDate>
        <link>https://concrete-mixer.github.io//2017/02/call-for-field-recordings/</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io//2017/02/call-for-field-recordings/</guid>
        
        
        <category>Concrète Mixer Radio</category>
        
      </item>
    
      <item>
        <title>What&#39;s new</title>
        <description>&lt;p&gt;I last updated this blog in December 2015. In 2016 my time was rather swamped by work and fatherhood, but I tinkered away now and then and undertook some major work toward the end of last year. The result of this is Concrète Mixer 2.0, and this post outlines what’s changed.&lt;/p&gt;

&lt;h1 id=&quot;the-audio-is-much-the-same&quot;&gt;The audio is much the same&lt;/h1&gt;

&lt;p&gt;Firstly, the least impressive bit: the audio rendering is much the same as before. Some new processing has been added to playSound, and some tweaks to playFx have been made here and there, but there’s not too much different. I have other ideas but most of the effort has been aimed at refactoring the app to make it more stable and (frankly) sane.&lt;/p&gt;

&lt;h1 id=&quot;no-more-perl&quot;&gt;No more Perl&lt;/h1&gt;

&lt;p&gt;The biggest change to the codebase is that there’s no Perl wrapper for the app. Instead, the functionality formerly implemented in Perl has been rewritten in ChucK.&lt;/p&gt;

&lt;p&gt;This change was facilitated by my discovery that ChucK has FileIO and regular expression libraries which I can read and parse the config file. I’m a bit rueful I didn’t discover these libs earlier, although to be fair neither of them is documented on the ChucK website.&lt;/p&gt;

&lt;h1 id=&quot;hello-python---soundcloud-support&quot;&gt;Hello Python - Soundcloud support&lt;/h1&gt;

&lt;p&gt;Even as I dispensed with Perl, I had an idea to add SoundCloud support, and decided use the Python Soundcloud library.&lt;/p&gt;

&lt;p&gt;For a while I’d thought that Soundcloud support for users might be handy.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Make a playlist in Soundcloud, making all the files downloadable&lt;/li&gt;
  &lt;li&gt;Put the playlist URL(s) into the concrete.conf file.&lt;/li&gt;
  &lt;li&gt;Concrete Mixer will progressively download the files from the playlist and play them when needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s support for most sound codecs via the lib-avconc library (aka ffmpeg). Soundcloud support makes evaluation of the app easier, and the default &lt;code class=&quot;highlighter-rouge&quot;&gt;concrete.conf.sample&lt;/code&gt; points to some demo playlists.&lt;/p&gt;

&lt;h1 id=&quot;concrte-mixer-in-docker&quot;&gt;Concrète Mixer in Docker&lt;/h1&gt;

&lt;p&gt;I’ve decided to remove the compiled binary and selected chugins from the CM distribution - it wasn’t really appropriate to sling binaries in a github repo, and it’s certainly easier to get users to compile ChucK themselves. However this means that a prospective user now needs to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;compile ChucK&lt;/li&gt;
  &lt;li&gt;compile chugins&lt;/li&gt;
  &lt;li&gt;install the supporting Python libs for Soundcloud support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…which is a bit messy. As a response to this, I’ve built a &lt;a href=&quot;https://github.com/concrete-mixer/cm-docker-rpi-dac&quot;&gt;Docker image&lt;/a&gt; which installs all these prerequisites and kicks off CM execution. This image is built with Raspbian to run on a Raspberry Pi.&lt;/p&gt;

&lt;h1 id=&quot;concrte-mixer-as-an-internet-radio-station&quot;&gt;Concrète Mixer as an internet radio station&lt;/h1&gt;

&lt;p&gt;Finally, I’ve made &lt;a href=&quot;https://github.com/concrete-mixer/cm-docker-rpi-internet&quot;&gt;another Docker image&lt;/a&gt; which augments Concrète Mixer with &lt;a href=&quot;http://www.darkice.org&quot;&gt;Darkice&lt;/a&gt; and &lt;a href=&quot;https://www.icecast.org&quot;&gt;Icecast&lt;/a&gt; to create a Concrète Mixer radio station. Despite the extra processing required, this setup runs pretty well on a Pi3. You can hear the result &lt;a href=&quot;http://concrete-mixer.venturus.io/concrete-mixer.mp3&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;things-to-come&quot;&gt;Things to come&lt;/h1&gt;

&lt;p&gt;The development of 2.0 has tidied up a lot of ugliness in the original build and suggest a way forward for the future.&lt;/p&gt;

&lt;h2 id=&quot;near-term---radio-concrte&quot;&gt;Near term - Radio Concrète&lt;/h2&gt;

&lt;p&gt;I’ve always had a question mark in my head over how punters would use Concrète Mixer, who they would be and why they would want to use it. As an occasional sound recordist who likes mashing up audio, the use case seems obvious to me, and I guess there are others who might be keen, but whether they’d want little boxes to do it or not is still unknown to me.&lt;/p&gt;

&lt;p&gt;Instead, Concrète Mixer as an internet radio station seems like a good focus to the project. The way forward seems to me to be to get more sounds, and refine the effects/playback system.&lt;/p&gt;

&lt;h2 id=&quot;longer-term&quot;&gt;Longer term&lt;/h2&gt;

&lt;p&gt;There’s still a lot that could be done on the audio front:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The effects chain is still mono (hidden with a bit of delay on a randomly selected channel&lt;/li&gt;
  &lt;li&gt;I have some more sound mashing ideas on playback that I haven’t explored yet. Some of these ideas (eg stereo reverb) will have to wait until more powerful Raspberry Pis are available.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 07 Feb 2017 00:00:00 +1300</pubDate>
        <link>https://concrete-mixer.github.io//2017/02/whats-new/</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io//2017/02/whats-new/</guid>
        
        
        <category>Concrète Mixer</category>
        
      </item>
    
      <item>
        <title>Randomness in sound</title>
        <description>&lt;p&gt;A somewhat chin-strokey examination of how chance can be applied to open-ended electronic audio.&lt;/p&gt;

&lt;p&gt;When starting out writing audio processing scripts my plan was to devise a system that would generate sound sufficiently complex that by listening to it I wouldn’t be able to determine how it had been constructed.  I’m not sure quite why this idea interests me, but I guess I like suprises.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that writing something that baffles you requires a lot of complexity and a lot of time - something at odds with the amount of time (generally, nocturnal dilettanting) that I can invest. Concrete Mixer ended up being a compromise. Take some real world sounds (ie don’t invest a lot of effort in complex signal generation) and devise a broad range of operations that could be applied to them, determined by chance.&lt;/p&gt;

&lt;h1 id=&quot;go-plenty-random&quot;&gt;Go plenty random&lt;/h1&gt;

&lt;p&gt;Concrete Mixer makes a lot of choices in determining the sound that is output:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The order in which sound files are played (and which consequently which files will be mixed with each other). Even with a few dozen files the number of possible combinations of sounds in a single render run is enormous.&lt;/li&gt;
  &lt;li&gt;The order in which effects are applied - there are 25 effects chains, which chosen randomly.&lt;/li&gt;
  &lt;li&gt;The amount of time an effect or sound playback manipulation is applied: each sound playback is divided into random stretches of time. For 7/8 of these segments, sample playback will proceed in a normal fashion; for the other 1/8 sound manipulation will be performed. Similarly, each effects chain is applied for a random period. Multiplying these factors, in any 20 second period some change in playback is being determined.&lt;/li&gt;
  &lt;li&gt;Further to this, each time some sound manipulation is performed, it may have many parameters that are determined randomly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I really want to convey is that the parameter space for CM is huge and thus, however subtly it may seem, every time you listen to it it is playing in a way it has never played before, or will again.&lt;/p&gt;

&lt;p&gt;Additionally, part of the process of improving CM is providing even more choices and consequently more variety and uniqueness.&lt;/p&gt;

&lt;h1 id=&quot;but-never-go-full-random&quot;&gt;But never go full random&lt;/h1&gt;

&lt;p&gt;Randomness is good, but there’s a hefty constraint to be applied: whatever and however many decisions get made, the result has to sound good. There’s no point writing an app that regularly presents its sounds in a way that listeners don’t like.&lt;/p&gt;

&lt;p&gt;An early iteration of Concrete Mixer called Sound Forest frequently sounded poor, mostly because I had the parameter space for the effects chain so open that a often the choices made were nonsensical. Even so I remained undaunted: I even earnestly explained in the README file that although the app would often sound terrible, that this was in fact a virtue. Eventually it occurred to me that things had to be reined in a bit. I’ve always been sceptical about musicians who are enamoured with process over result, and going full random with awkward results is less ideal than providing a constrained but more rewarding set of possibilities.&lt;/p&gt;

&lt;p&gt;Even so, there’s no way that a computer arbitrarily making choices will always make the optimum choice for the sound files being played. Not without some fiendish piece of sound analysis. In this sense CM will never be the equal of a deliberate composition of Musique Concrete. Looking at it another way though, when an apt choice does get made, you can appreciate it more for being a product of chance rather than intent.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Dec 2015 00:00:00 +1300</pubDate>
        <link>https://concrete-mixer.github.io//2015/12/randomness/</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io//2015/12/randomness/</guid>
        
        
        <category>Concrète Mixer</category>
        
      </item>
    
      <item>
        <title>About Concrète Mixer&#39;s effects chains</title>
        <description>&lt;p&gt;This post discusses Concrete Mixer’s effects chains system, which is governed by the playFx entity within CM.&lt;/p&gt;

&lt;h1 id=&quot;why-effects&quot;&gt;Why effects?&lt;/h1&gt;

&lt;p&gt;Before we really get in to the discussion, it’s probably worth asking the fundamental question: why we need effects chains? For me there are two fundamental reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to blend disparate sound sources&lt;/li&gt;
  &lt;li&gt;to dub it up a bit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;blending-files&quot;&gt;Blending files&lt;/h2&gt;

&lt;p&gt;One or more raw recordings can be sound a bit sparse in the audio field, especially if they’re mono. An effects chain helps to add depth to the stereo field.&lt;/p&gt;

&lt;p&gt;In case you have recordings that are so bursting with incident they need no artificial enhancement, you can turn off the effects chain by specifying &lt;code class=&quot;highlighter-rouge&quot;&gt;fx_chain_enabled=0&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/concrete.conf&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;dubbing-it-up&quot;&gt;Dubbing it up&lt;/h2&gt;

&lt;p&gt;The main reason to alter a sound is to make it more interesting and/or appropriate for its intended use. My personal interest in this regard is similar to the approach taken in dub reggae, where vocal tracks are stripped back from the original multitrack and a variety of effects are applied to what’s left, in a manner convivial to herbal intoxication.&lt;/p&gt;

&lt;p&gt;There is of course an art to dub, and expecting a series of random effects choices to enhance a recording perfectly is to ask quite a bit. The secret is to have the effects change reasonably often (around a minute is good), so that if one combination comes up that ia suboptimal, there’s a good chance the next set will be more appropriate.&lt;/p&gt;

&lt;h1 id=&quot;how-the-effects-chains-work&quot;&gt;How the effects chains work&lt;/h1&gt;

&lt;p&gt;playFx defines 25 effects combinations. These chains are groupings of the effects libraries found in lib/Fx, like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-chuck&quot; data-lang=&quot;chuck&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;if ( choice == 1 ) {
    [
        new FxFilter,
        new FxDelay
    ] @=&amp;gt; fxChain;
}

if ( choice == 2 ) {
    [
        new FxDelayVariable,
        new FxDelay
    ] @=&amp;gt; fxChain;
}

if ( choice == 3 ) {
    [
        new FxDelay,
        new FxHarmonicDelay
    ] @=&amp;gt; fxChain;
}

// continued to choice 25&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(In case you’re wondering, no, ChucK &lt;em&gt;doesn’t&lt;/em&gt; support &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; statements.)&lt;/p&gt;

&lt;p&gt;The chains can be of arbitrary length, but the most you really want is four. This is partly because the cumulative result of too many effects is a mushy sound, but mostly because a Raspberry Pi has only limited CPU capacity and signal processing is expensive.&lt;/p&gt;

&lt;p&gt;You’ll note that each chain has a delay element. I think all the chains have some delay component, even if it’s reverb. It’s possible to have effects like flanging or frequency filters which track with the source sound in real time, but delay lines make the effects easier to discern, and also don’t muddy the sound of the original too much. If echoes killed your brother and you’d rather not hear them, you can always rewrite the chains by editing ‘lib/Modes/Concrete/playFxChain.ck`.&lt;/p&gt;

&lt;p&gt;Some Fx* classes (FxDelay and FxFilter being good examples) are wrappers for standard ChucK UGens. Others are custom (discussed below). ChucK users may be surprised that these effects have not been written as Chubgraphs (a convention for aggregating multiple Ugens together); this is for the simple reason that I hadn’t heard of them at the time I implemented Fx*. However, if I had my time over I definitely would, and it’s on the list for future refactoring.&lt;/p&gt;

&lt;h1 id=&quot;custom-fx-libs&quot;&gt;Custom Fx libs&lt;/h1&gt;

&lt;p&gt;The most interesting aspect of organising the effects chain for Concrete Mixer was to experiment with several ideas around Fx design. Most of these ideas have involved tinkering with existing ChucK UGens, but in mildly less conventional ways.&lt;/p&gt;

&lt;h2 id=&quot;fxdelayvariable&quot;&gt;FxDelayVariable&lt;/h2&gt;

&lt;p&gt;This effect randomly alters the delay amount, for the duration of the delay amount, meaning each echo is of different length to the last. This results in a skidding, skittering sound.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-chuck&quot; data-lang=&quot;chuck&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun void activity() {
    while ( active ) {
        // set duration for delay
        chooser.getDur( 0.05, 0.50 ) =&amp;gt; dur duration;

        duration =&amp;gt; delay.delay;
        duration - 400::samp =&amp;gt; dur mainDuration;

        // In the grand scheme of things we only need
        // duration =&amp;gt; now, but randomly changing delay
        // times means there are discontinuities in the signal.
        // To paper over these cracks (and pops) we fade the signal
        // around the discontinuities

        // fade in
        fader.fadeIn( 200::samp, 1.0, output );
        200::samp =&amp;gt; now;

        // work through mainDuration
        mainDuration =&amp;gt; now;

        // fade out
        fader.fadeOut( 200::samp, output );
        200::samp =&amp;gt; now;
    }
}&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;fxflanger&quot;&gt;FxFlanger&lt;/h2&gt;

&lt;p&gt;Flangers are a reasonably straightforward effect to produce. Flangers normally use a sine wave LFO to vary the delay value on the signal. With my implementation I’ve set an LFO on the feedback amount as well - I’m pretty sure I’ve never worked with a flanger that does this, though I guess it might be common. Certainly easy to do.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-chuck&quot; data-lang=&quot;chuck&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun void activity() {
    while ( active ) {
        lfo.osc( oscFreq, oscAmount, oscType ) =&amp;gt; float freqDelta;
        baseDelay::ms + freqDelta::ms =&amp;gt; flanger.delay;
        lfo.osc( volFreq, volAmount, volType ) =&amp;gt; feedback.gain;
        10::ms =&amp;gt; now;
    }
}&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;flanger is a DelayA UGen.&lt;/li&gt;
  &lt;li&gt;This code is reasonably abstracted; the important part being the two lfo.osc lines. One oscillates the flanger object delay time, while the other oscillates the feedback.&lt;/li&gt;
  &lt;li&gt;The effect is recalculated every 10 milliseconds, which allows for LFO frequency resolution up to 50Hz.&lt;/li&gt;
  &lt;li&gt;When initialised, the randomised parameters for the flanger are calculated in two groups:
    &lt;ul&gt;
      &lt;li&gt;Slow mode - slow LFO frequency (less than 1Hz) and large feedback parameter&lt;/li&gt;
      &lt;li&gt;Fast mode - faster LFO frequency with a smaller feedback amount, producing more of a tremolo effect.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result of all this is that by assigning different LFO rates to the flange delay time and to the flange feedback time, you end up with a more chaotic, varying sound.&lt;/p&gt;

&lt;h3 id=&quot;sample-hold-flanging&quot;&gt;Sample Hold Flanging&lt;/h3&gt;

&lt;p&gt;A further twist on the classic flanger is that every so often, rather than apply the flange effect with a sine wave LFO, the LFO type is set to sample hold. This gives us a flanger version of FxDelayVariable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-chuck&quot; data-lang=&quot;chuck&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun string getOscType() {
    chooser.getInt( 1, 4 ) =&amp;gt; int choice;

    if ( choice == 1 ) {
        return &quot;sampleHold&quot;;
    }
    else {
        // we would go with sine 75% of the time
        return &quot;sine&quot;;
    }
}&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;fxharmonicdelay&quot;&gt;FxHarmonicDelay&lt;/h2&gt;

&lt;p&gt;This effect is halfway between a flanger and variable delay. Here the delay’s amount switches between notes in a harmonic series (the root notes being randomly assigned from a pool of midi frequencies). The harmonic pitches are defined from the delay amount, meaning that very short delay amounts must be used. To get the harmonic effect a large amount of feedback must be used, which can lead to a somewhat volatile result. Half the time an LFO is placed on the feedback amount, which makes the effect a bit more bearable.&lt;/p&gt;

&lt;p&gt;The harmonic ‘notes’ played are assigned randomly, so again the result is sample hold effect. Another interesting twist would be to assign a sequence of pitches that are continually repeated or gradually modulated.&lt;/p&gt;

&lt;h2 id=&quot;fxgate&quot;&gt;FxGate&lt;/h2&gt;

&lt;p&gt;Your father’s tremolo effect involves applying an LFO to a gain so that the volume of the signal rapidly drops out and returns. In Concrete Mixer this effect has been made a bit more interesting because the LFO frequency itself is modulated with an LFO. Similar to FxVariableDelay, this creates a bit of variable mayhem.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-chuck&quot; data-lang=&quot;chuck&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;    fun void activity() {
        while ( true ) {
            lfo.osc( lfoOscFreq, lfoOscAmount, &quot;sine&quot; ) =&amp;gt; float freqDelta;
            lfoBaseFreq + freqDelta =&amp;gt; float lfoFreqFinal;
            lfo.osc( lfoFreqFinal, amount, &quot;sine&quot; ) =&amp;gt; float gainDelta;
            0.5 + gainDelta =&amp;gt; g.gain;
            1::ms =&amp;gt; now;
        }
    }&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;fxreversedelay&quot;&gt;FxReverseDelay&lt;/h2&gt;

&lt;p&gt;This class relies on a custom Chugen called ReverseDelay. ReverseDelay is small enough to include here in full.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-chuck&quot; data-lang=&quot;chuck&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;public class ReverseDelay extends Chugen {
    float readArray[0];
    float writeArray[0];
    int readCount;
    int writeCount;
    float sample;

    fun void delay( int size ) {
        readArray.size( size );
        writeArray.size( size );
        size - 1 =&amp;gt; readCount;
    }

    fun float tick( float in ) {
        // if readArray.size(), delay() has not been called
        // do nothing
        if ( ! readArray.cap() ) {
            return in;
        }

        in =&amp;gt; writeArray[ writeCount ];
        readArray[ readCount ] =&amp;gt; sample;
        writeCount++;
        readCount--;

        if ( writeCount == writeArray.cap() ) {
            switchArrays();
        }

        return sample;
    }

    fun void switchArrays() {
        float tempArray[];

        // switch arrays
        readArray @=&amp;gt; tempArray;
        writeArray @=&amp;gt; readArray;
        tempArray @=&amp;gt; writeArray;

        // reset counts
        0 =&amp;gt; writeCount;
        readArray.cap() - 1 =&amp;gt; readCount;
    }
}&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The gist is that the current signal gets written to an array. Once the current array is full, it gets swapped with a second array. From then on values are read in reverse from the first array, providing the backwards delay signal, while current values get written to the second delay. This cycle repeats, and hey presto, reverse delay.&lt;/p&gt;

&lt;p&gt;The effect is very simple and it’s a surprise it (or perhaps a more acoustically sophisticated version) hasn’t been implemented natively in ChucK.&lt;/p&gt;

&lt;p&gt;Note: Chugens use a lot of system resources and this effect is not enabled by default for the Raspberry Pi.&lt;/p&gt;

&lt;h2 id=&quot;chugins&quot;&gt;Chugins&lt;/h2&gt;

&lt;p&gt;ChucK comes with a small number of effects components built in, but the language also supports Chugins, which are compiled signal processing modules which can be used like Ugens. Two are used in Concrete Mixer: Gverb and Bitcrusher. Gverb provides better quality reverb than ChucK’s native (and rather woeful) reverb Ugens. BitCrusher lowers bitrate and samplerate on a signal, turning it into metallic noise. These Chugins are incorporated into several CM effects chains.&lt;/p&gt;

&lt;h1 id=&quot;concludings&quot;&gt;Concludings&lt;/h1&gt;

&lt;p&gt;That’s an overview of Concrete Mixers effects system. There are other ideas I’d like to implement but at the moment there’s enough variety to be getting on with.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Dec 2015 00:00:00 +1300</pubDate>
        <link>https://concrete-mixer.github.io//2015/12/cm-fxchains/</link>
        <guid isPermaLink="true">https://concrete-mixer.github.io//2015/12/cm-fxchains/</guid>
        
        
        <category>Concrète Mixer</category>
        
      </item>
    
  </channel>
</rss>
